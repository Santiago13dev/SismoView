name: 🏗️ Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '21'

jobs:
  # ===============================================
  # FRONTEND BUILD & TEST
  # ===============================================
  frontend:
    name: 🎨 Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🧹 Run linting
        run: npm run lint

      - name: 🎨 Check formatting
        run: npm run format -- --check

      - name: 🏗️ Build application
        run: npm run build

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 7

  # ===============================================
  # BACKEND BUILD & TEST
  # ===============================================
  backend:
    name: ☕ Backend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: 🧹 Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest

      - name: 🧪 Run tests
        run: ./gradlew test

      - name: 🏗️ Build application
        run: ./gradlew build -x test

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/build/reports/tests/
            backend/build/reports/checkstyle/
          retention-days: 7

      - name: 📊 Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/build/libs/*.jar
          retention-days: 7

  # ===============================================
  # DOCKER BUILD
  # ===============================================
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: sismoview-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: sismoview-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===============================================
  # INTEGRATION TESTS
  # ===============================================
  integration:
    name: 🔧 Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Start services
        run: |
          docker-compose up -d --build
          sleep 30

      - name: 🧪 Health check tests
        run: |
          # Backend health check
          curl -f http://localhost:8080/actuator/health || exit 1
          
          # Frontend availability check
          curl -f http://localhost:3000 || exit 1
          
          # API endpoint test
          curl -f -X POST http://localhost:8080/api/simulate/seismic \
            -H "Content-Type: application/json" \
            -d '{"lat":10.5,"lon":166.3,"depthKm":10,"magnitude":6.3,"cities":[]}' || exit 1

      - name: 📊 Collect logs
        if: failure()
        run: |
          docker-compose logs > integration-logs.txt

      - name: 📊 Upload logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-logs
          path: integration-logs.txt

      - name: 🧹 Cleanup
        if: always()
        run: docker-compose down -v

  # ===============================================
  # SECURITY SCAN
  # ===============================================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ===============================================
  # CODE QUALITY
  # ===============================================
  quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
