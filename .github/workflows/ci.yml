name: CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Instalar dependencias
        run: npm ci

      - name: Ejecutar linter
        run: npm run lint --if-present
        continue-on-error: true

      - name: Verificar tipos TypeScript
        run: npm run type-check --if-present
        continue-on-error: true

      - name: Build del proyecto
        env:
          NEXT_TELEMETRY_DISABLED: 1
          CI: false
        run: npm run build

      - name: Ejecutar tests
        run: npm test --if-present
        continue-on-error: true

  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Dar permisos a gradlew
        run: chmod +x gradlew

      - name: Build con Gradle
        run: ./gradlew build --no-daemon --stacktrace

      - name: Ejecutar tests
        run: ./gradlew test --no-daemon
        continue-on-error: true

      - name: Generar reporte de tests
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Backend Test Results
          path: backend/build/test-results/test/*.xml
          reporter: java-junit
        continue-on-error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Verificar Docker Compose
        run: |
          docker-compose config
          echo "Docker Compose configuration is valid"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [frontend, backend, docker]
    if: always()
    
    steps:
      - name: CI Completado
        run: |
          echo "✅ CI Pipeline completado"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Backend: ${{ needs.backend.result }}"
          echo "Docker: ${{ needs.docker.result }}"
